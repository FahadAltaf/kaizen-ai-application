@page "/prospects"
@inject HttpClient client
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
<main class="lg:pl-72 flex flex-col h-screen">
    <header class="bg-white shadow-sm">
        <div class=" max-w-7xl px-4 py-4 sm:px-6 lg:px-8">
            <h1 class="text-lg font-semibold leading-6 text-gray-900">Prospects</h1>
        </div>
    </header>
    <div class="flex-1 overflow-y-auto p-5">

        <h3 class="text-base font-semibold leading-6 text-gray-900">New Prospect</h3>
        <div class="mt-2 max-w-xl text-sm text-gray-500">
            <p>To create a new prospect please fill the form below</p>
        </div>
        <div class="mt-5 sm:flex sm:items-center">
            <div class="w-full sm:max-w-xs">
                <label for="name" class="sr-only">Name or Alias</label>
                <input type="text" @bind-value="tRecord.Alias" name="name" id="name" class="block w-full rounded-md border-0 py-1.5 px-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="ABC XYZ">
            </div>
            <div class="w-full sm:max-w-xs">
                <label for="number" class="sr-only">WhatsApp Number</label>
                <input type="number" @bind-value="tRecord.PlatformUserId" name="number" id="email" class="block ml-2 w-full rounded-md border-0 py-1.5 px-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="971000000000">
            </div>
            <button type="button" @onclick="async ()=> await CreateRecord()" class="mt-3 inline-flex w-full items-center justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:ml-3 sm:mt-0 sm:w-auto">Create</button>
        </div>


        @if (Loading)
        {
            <LoadingComponent />
        }

        @if (threads != null)
        {
            <div class="mt-8 flow-root">
                <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
                            <table class="min-w-full divide-y divide-gray-300">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Name</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Number</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Source</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Last Activity At</th>
                                        <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                            <span class="sr-only">Action</span>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200 bg-white">
                                    @foreach (var prospect in threads)
                                    {

                                        if (toEdit == prospect.Id)
                                        {
                                            <tr>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                    <div class="col-span-full">
                                                        <input @bind-value="prospect.Alias" type="name" name="name" id="name" placeholder="Enter prospect name or alias" class="block w-full rounded-md border-0 py-1.5 px-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                                    </div>
                                                </td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@prospect.PlatformUserId</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@Enum.GetName(typeof(ConversationPlatform), prospect.Platform)</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@prospect.LastActivityAt.Humanize()</td>
                                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                                    <a href="javascript:void(0)" @onclick="async ()=> await SaveChanges(prospect)" class="text-indigo-600 hover:text-indigo-900">Save</a>
                                                </td>
                                            </tr>
                                        }
                                        else
                                        {
                                            <tr>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@prospect.Alias</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@prospect.PlatformUserId</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@Enum.GetName(typeof(ConversationPlatform), prospect.Platform)</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@prospect.LastActivityAt.Humanize()</td>
                                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                                    <a href="javascript:void(0)" @onclick="async ()=> await EditRecord(prospect.Id)" class="text-indigo-600 hover:text-indigo-900">Edit</a>
                                                </td>
                                            </tr>
                                        }

                                    }

                                    <!-- More people... -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>

</main>
@code {
    ThreadRecord tRecord = new ThreadRecord() { AssistantId = "asst_CkXRdKynHfveoZ22Pg4gfQuw", LastActivityAt = DateTime.UtcNow, Platform = ConversationPlatform.WhatsApp };
    public List<ThreadRecord> threads { get; set; }
    public string APICode { get; set; } = "7Q7Uo9EsyC4jHnqocWFrwrYm-Cc94NHjHgYG4-wt2X_8AzFuHQ86RA==";
    bool Loading = false;
    bool HasError = false;
    public string Message { get; set; }
    public string toEdit { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadThreads();
        }
    }

    async Task EditRecord(string id)
    {
        toEdit = id;
        StateHasChanged();
        await Task.CompletedTask;
    }


    async Task CreateRecord()
    {
        try
        {
            Loading = true;
            Message = string.Empty;

            StateHasChanged();
            var url = $"api/CreateRecord?code={APICode}";
            var response = await client.PostAsJsonAsync<ThreadRecord>(url, tRecord);
            if (response != null)
            {
                var result = await response.Content.ReadFromJsonAsync<APIGeneralResponse<ThreadRecord>>();
                if (result != null)
                {
                    if (result.Status)
                    {
                        tRecord = new ThreadRecord() { AssistantId = "asst_CkXRdKynHfveoZ22Pg4gfQuw", LastActivityAt = DateTime.UtcNow, Platform = ConversationPlatform.WhatsApp };
                        Message = "Prospect has been created";
                        HasError = false;
                    }
                    else
                    {
                        Message = result.Message;
                        HasError = true;
                    }
                }
                else
                {
                    Message = "Bad response. Please try again";
                    HasError = true;
                }
            }
            else
            {
                Message = "Server error. Please try again later";
                HasError = true;
            }
        }
        catch (Exception ex)
        {
            Message = "Something happened! Reason: " + ex.Message;
            HasError = true;
            Console.WriteLine(ex.Message);
        }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }

    async Task SaveChanges(ThreadRecord record)
    {
        try
        {
            Loading = true;
            Message = string.Empty;

            StateHasChanged();
            var url = $"api/UpdateRecord?code={APICode}";
            var response = await client.PostAsJsonAsync<ThreadRecord>(url, record);
            if (response != null)
            {
                var result = await response.Content.ReadFromJsonAsync<APIGeneralResponse<ThreadRecord>>();
                if (result != null)
                {
                    if (result.Status)
                    {
                        tRecord = new ThreadRecord() { AssistantId = "asst_CkXRdKynHfveoZ22Pg4gfQuw", LastActivityAt = DateTime.UtcNow, Platform = ConversationPlatform.WhatsApp };
                        Message = "Prospect has been created";
                        HasError = false;
                        toEdit = string.Empty;
                    }
                    else
                    {
                        Message = result.Message;
                        HasError = true;
                    }
                }
                else
                {
                    Message = "Bad response. Please try again";
                    HasError = true;
                }
            }
            else
            {
                Message = "Server error. Please try again later";
                HasError = true;
            }
        }
        catch (Exception ex)
        {
            Message = "Something happened! Reason: " + ex.Message;
            HasError = true;
            Console.WriteLine(ex.Message);
        }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }

    async Task LoadThreads()
    {
        try
        {
            Loading = true;

            StateHasChanged();
            var response = await client.GetFromJsonAsync<APIGeneralResponse<List<ThreadRecord>>>($"api/Prospects?code={APICode}");
            threads = response.Data.OrderByDescending(x => x.LastActivityAt).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            Loading = false;
            StateHasChanged();
        }



    }
}
