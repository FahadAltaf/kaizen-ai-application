@page "/conversations/{assistantId}"
@using System.Text.RegularExpressions
@using Azure.Messaging.WebPubSub
@inject HttpClient client
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration


<main class="lg:pl-72 flex flex-col h-screen">
    <div class="xl:pl-96 flex-1 overflow-y-auto" @ref="messagesContainer">
        <div class="py-10 lg:py-6">
            <!-- Prompt Messages -->
            @if (selectedThreadRecord != null)
            {
                if (messages == null)
                {
                    <LoadingComponent />
                }
                else
                {
                    <div class="flex-1 overflow-y-auto text-sm leading-6 text-slate-900 shadow-md  sm:text-base sm:leading-7">
                        @foreach (var message in messages)
                        {
                            if ((message.role == "assistant" || message.metadata.First().Value == "agent"))
                            {
                                <div class="flex bg-slate-100 px-4 py-8 dark:bg-slate-900 sm:px-6">
                                    <img class="mr-2 flex h-8 w-8 rounded-full sm:mr-4"
                                         src="https://dummyimage.com/256x256/354ea1/ffffff&text=G" />

                                    <div class="flex w-full flex-col items-start lg:flex-row lg:justify-between">
                                        <p class="max-w-3xl">
                                            @RemoveSourceReference(message.content)
                                        </p>

                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="flex flex-row px-4 py-8 sm:px-6">
                                    <img class="mr-2 flex h-8 w-8 rounded-full sm:mr-4"
                                         src="https://dummyimage.com/256x256/363536/ffffff&text=U" />

                                    <div class="flex max-w-3xl items-center">
                                        <p>@message.content</p>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }

                if (selectedThreadRecord.AiMode)
                {
                    <button type="button" @onclick="onToggle" class="sticky bottom-0 bg-white block w-full rounded-lg border-2 border-dashed border-gray-300 p-2 text-center hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                        <span class="mt-2 block text-sm font-semibold text-gray-900">Click here to join the conversation</span>
                    </button>
                }
                else
                {
                    <div class="sticky bottom-0 flex w-full items-center rounded-b-md border-t border-slate-300 bg-slate-200 p-2 dark:border-slate-700 dark:bg-slate-900">
                        <label for="chat" class="sr-only">Enter your prompt</label>
                        <div>
                            <button @onclick="onToggle" class="hover:text-blue-600 dark:text-slate-200 dark:hover:text-blue-600 sm:p-2"
                                    type="button">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m.94 3.198l.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0112 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 016 18.719m12 0a5.971 5.971 0 00-.941-3.197m0 0A5.995 5.995 0 0012 12.75a5.995 5.995 0 00-5.058 2.772m0 0a3 3 0 00-4.681 2.72 8.986 8.986 0 003.74.477m.94-3.197a5.971 5.971 0 00-.94 3.197M15 6.75a3 3 0 11-6 0 3 3 0 016 0zm6 3a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0zm-13.5 0a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0z" />
                                </svg>

                                <span class="sr-only">Add</span>
                            </button>
                        </div>
                        <textarea id="chat-input" @onkeypress="HandleKeyPress" @bind-value="text" @bind-value:event="oninput"
                                  rows="1"
                                  class="mx-2 flex min-h-full w-full rounded-md border border-slate-300 bg-slate-50 p-2 text-base text-slate-900 placeholder-slate-400 focus:border-blue-600 focus:outline-none focus:ring-1 focus:ring-blue-600 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-50 dark:placeholder-slate-400 dark:focus:border-blue-600 dark:focus:ring-blue-600"
                                  placeholder="Enter your prompt"></textarea>
                        <div>
                            <button @onclick="SendMessage" class="inline-flex hover:text-blue-600 dark:text-slate-200 dark:hover:text-blue-600 sm:p-2"
                                    type="button">
                                <svg xmlns="http://www.w3.org/2000/svg"
                                     class="h-6 w-6"
                                     aria-hidden="true"
                                     viewBox="0 0 24 24"
                                     stroke-width="2"
                                     stroke="currentColor"
                                     fill="none"
                                     stroke-linecap="round"
                                     stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                    <path d="M10 14l11 -11"></path>
                                    <path d="M21 3l-6.5 18a.55 .55 0 0 1 -1 0l-3.5 -7l-7 -3.5a.55 .55 0 0 1 0 -1l18 -6.5"></path>
                                </svg>
                                <span class="sr-only">Send message</span>
                            </button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

</main>

<aside class="fixed inset-y-0 left-72 hidden w-96 overflow-y-auto border-r border-gray-200 px-2 py-6 xl:block">
    <ul role="list" class="divide-y divide-gray-100">
        @if (threads == null)
        {
            <LoadingComponent />
        }
        else
        {
            foreach (var thread in threads)
            {
                <li class="p-4  @((selectedThreadRecord!=null && selectedThreadRecord.Id==thread.Id)?"force-border":"hover:bg-gray-100 hover:rounded")">
                    <a href="javascript:void(0)" @onclick="(async ()=>await LoadMessages(thread.ThreadId))">
                        <div class="flex items-center gap-x-3">
                            <h3 class="flex-auto truncate text-sm font-semibold leading-6 text-gray-900">@thread.PlatformUserId</h3>
                            <div class="flex-none text-xs text-gray-500">
                                <div class="mt-1 flex items-center gap-x-1.5">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
                                    </svg>

                                    <p class="text-xs leading-5 text-gray-500">Offline</p>
                                </div>
                            </div>
                        </div>
                        <div class="flex items-center gap-x-3">
                            <h3 class="flex-auto truncate text-sm font-semibold leading-6 text-gray-500">Last Activity at 5 min ago</h3>
                            <div class="flex-none text-xs text-gray-500">
                                <div class="mt-1 flex items-center gap-x-1.5">
                                    @if (thread.AiMode)
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-indigo-600">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.894 20.567L16.5 21.75l-.394-1.183a2.25 2.25 0 00-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 001.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 001.423 1.423l1.183.394-1.183.394a2.25 2.25 0 00-1.423 1.423z" />
                                        </svg>
                                        <span class="text-indigo-600">AI bot</span>
                                    }
                                    else
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
                                        </svg>

                                        <span>Agent</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </a>

                </li>
            }
        }
        @*      <li class="p-4 border border-indigo-300 rounded hover:bg-gray-100 ">
        <a href="javascript:void(0)">
        <div class="flex items-center gap-x-3">
        <h3 class="flex-auto truncate text-sm font-semibold leading-6 text-gray-900">Michael Foster</h3>
        <div class="flex-none text-xs text-gray-500">
        <div class="mt-1 flex items-center gap-x-1.5">
        <div class="flex-none rounded-full bg-emerald-500/20 p-1">
        <div class="h-1.5 w-1.5 rounded-full bg-emerald-500"></div>
        </div>
        <p class="text-xs leading-5 text-gray-500">Online</p>
        </div>
        </div>
        </div>
        <p class="mt-3 truncate text-sm text-gray-500">Source: WhatsApp</p>
        </a>
        </li>

        *@

    </ul>

</aside>

@code {
    [Parameter]
    public string assistantId { get; set; }
    public ThreadRecord selectedThreadRecord { get; set; }
    public List<ThreadRecord> threads { get; set; }
    public List<Conversations> messages { get; set; }
    public string text { get; set; }
    private ElementReference messagesContainer;

    private WebPubSubServiceClient serviceClient;
    private string connectionString = "";// Your Web PubSub connection string
    private string hubName = "kaizen"; // Your hub name


    protected override async Task OnInitializedAsync()
    {
        connectionString = Configuration["WebPubSub"];
        serviceClient = new WebPubSubServiceClient(connectionString, hubName);
        var url = serviceClient.GetClientAccessUri();

        await JSRuntime.InvokeVoidAsync("websocketInterop.connect", DotNetObjectReference.Create(this), url);
    }

    [JSInvokable]
    public void ReceiveMessage(string message)
    {
        switch (message)
        {
            case "messageRecieved":
                Console.WriteLine(message);
                break;
            default:
                break;
        }
    }

    private void HandleNewMessage(string message)
    {
        // Logic to handle the "new" message
        // Update UI or trigger other actions
        Console.WriteLine(message);
    }


    async Task LoadMessages(string threadId)
    {
        try
        {

            selectedThreadRecord = threads.FirstOrDefault(x => x.ThreadId == threadId);
            messages = null;
            StateHasChanged();
            var response = await client.GetFromJsonAsync<APIGeneralResponse<List<Conversations>>>($"api/Conversation/{threadId}?code={Configuration["APICode"]}");
            messages = response.Data;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            StateHasChanged();
            await Task.Delay(700);
            await ScrollToBottom();
        }


    }

    static string RemoveSourceReference(string text)
    {
        string startPattern = "【";
        string endPattern = "】";
        int startIndex = text.IndexOf(startPattern);
        int endIndex;

        while (startIndex != -1)
        {
            endIndex = text.IndexOf(endPattern, startIndex);
            if (endIndex != -1)
            {
                // Remove the text from startPattern to endPattern
                text = text.Remove(startIndex, endIndex - startIndex + endPattern.Length);
            }
            else
            {
                // If there's no endPattern, break the loop
                break;
            }

            startIndex = text.IndexOf(startPattern);
        }

        return text;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await client.GetFromJsonAsync<APIGeneralResponse<List<ThreadRecord>>>($"api/Threads/{assistantId}?code={Configuration["APICode"]}");
            threads = response.Data.OrderByDescending(x => x.LastActivityAt).ToList();

            StateHasChanged();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
    }

    private async Task SendMessage()
    {
        if (selectedThreadRecord != null)
        {
            try
            {
                var conversation = new
                Conversations
                    { content = text, role = "agent" };
                conversation.metadata.Add("role", "agent");
                messages.Add(conversation);
                text = string.Empty;
                await ScrollToBottom();
                StateHasChanged();

                var response = await client.PostAsJsonAsync($"api/Chat?code={Configuration["APICode"]}", new ConversationModel

                    {
                        AssistantId = selectedThreadRecord.AssistantId,
                        content = conversation.content,
                        role = "agent",
                        ThreadId = selectedThreadRecord.ThreadId
                    });
                if (response.IsSuccessStatusCode)
                {

                    await LoadMessages(selectedThreadRecord.ThreadId);

                    // var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                    // // Process the response here, e.g., display the message in the UI or clear the text field
                    // userMessage = ""; // Clear the message input after sending
                }
                else
                {
                    // Handle errors here
                    Console.WriteLine("Error sending message");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                StateHasChanged();
            }

        }


    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public async Task onToggle()
    {
        try
        {
            var response = await client.GetFromJsonAsync<APIGeneralResponse<bool>>($"api/Switch/{selectedThreadRecord.ThreadId}/{!selectedThreadRecord.AiMode}?code={Configuration["APICode"]}");
            if (response.Status)
            {
                var response1 = await client.GetFromJsonAsync<APIGeneralResponse<List<ThreadRecord>>>($"api/Threads/{assistantId}?code={Configuration["APICode"]}");
                threads = response1.Data;
                await LoadMessages(selectedThreadRecord.ThreadId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
