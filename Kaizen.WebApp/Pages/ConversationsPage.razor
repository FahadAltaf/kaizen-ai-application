@page "/conversations/{assistantId}"
@using System.Text.RegularExpressions
@using Azure.Messaging.WebPubSub
@inject HttpClient client
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration


<main class="lg:pl-72 flex flex-col h-screen">
    <div class="xl:pl-96 flex-1 overflow-y-auto" @ref="messagesContainer">

        <!-- Prompt Messages -->
        @if (selectedThreadRecord != null)
        {
            if (messages == null)
            {
                <LoadingComponent />
            }
            else if (messages.Count == 0)
            {
                <div class="text-center">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-semibold text-gray-900">No Messages</h3>
                    <p class="mt-1 text-sm text-gray-500">There is no message of unable to fetch messages. Try to reload the conversation  </p>

                </div>

            }
            else
            {
                <div class="flex-1 overflow-y-auto text-sm leading-6 text-slate-900 shadow-md  sm:text-base sm:leading-7">
                    @foreach (var message in messages)
                    {
                        if ((message.role == "assistant" || message.metadata.First().Value == "agent"))
                        {
                            <div class="flex @((message.metadata.First().Value == "agent")?"bg-slate-300":"bg-slate-100") px-4 py-8 dark:bg-slate-900 sm:px-6">
                                <img class="mr-2 flex h-8 w-8 rounded-full sm:mr-4"
                                     src="@((message.metadata.First().Value == "agent")?"https://dummyimage.com/256x256/354ea1/ffffff&text=A":"https://dummyimage.com/256x256/354ea1/ffffff&text=B")" />

                                <div class="flex w-full flex-col items-start lg:flex-row lg:justify-between">
                                    <p class="max-w-3xl">
                                        @RemoveSourceReference(message.content)
                                    </p>
                                    <p>@UnixTimeStampToDateTime(message.createdAt) </p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="flex flex-row px-4 py-8 sm:px-6">
                                <img class="mr-2 flex h-8 w-8 rounded-full sm:mr-4"
                                     src="https://dummyimage.com/256x256/363536/ffffff&text=U" />

                                <div class="flex max-w-3xl items-center">
                                    <p>@message.content</p>
                                </div>
                                <p>@UnixTimeStampToDateTime(message.createdAt) </p>
                            </div>
                        }
                    }
                </div>
            }

            if (selectedThreadRecord.AiMode)
            {
                <button type="button" @onclick="onToggle" class="sticky bottom-0 bg-white block w-full rounded-lg border-2 border-dashed border-gray-300 p-2 text-center hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                    <span class="mt-2 block text-sm font-semibold text-gray-900">Click here to join the conversation</span>
                </button>
            }
            else
            {
                <div class="sticky bottom-0 flex w-full items-center rounded-b-md border-t border-indigo-300 bg-indigo-600 p-2 text-white">
                    <label for="chat" class="sr-only">Enter your prompt</label>
                    <div>
                        <button @onclick="onToggle" class="hover:text-indigo-800 dark:text-slate-200 dark:hover:text-blue-600 sm:p-2"
                                type="button">

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.894 20.567L16.5 21.75l-.394-1.183a2.25 2.25 0 00-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 001.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 001.423 1.423l1.183.394-1.183.394a2.25 2.25 0 00-1.423 1.423z" />
                            </svg>
                            <span class="sr-only">Add</span>
                        </button>
                    </div>
                    <input id="chat-input" @onkeypress="HandleKeyPress" @bind-value="text" @bind-value:event="oninput"
                           class="mx-2 flex min-h-full w-full rounded-md border border-slate-300 bg-slate-50 p-2 text-base text-slate-900 placeholder-slate-400 focus:border-blue-600 focus:outline-none focus:ring-1 focus:ring-blue-600 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-50 dark:placeholder-slate-400 dark:focus:border-blue-600 dark:focus:ring-blue-600"
                           placeholder="Enter your prompt"></input>
                    <div>
                        <button @onclick="SendMessage" class="inline-flex hover:text-blue-600 dark:text-slate-200 dark:hover:text-blue-600 sm:p-2"
                                type="button">
                            <svg xmlns="http://www.w3.org/2000/svg"
                                 class="h-6 w-6"
                                 aria-hidden="true"
                                 viewBox="0 0 24 24"
                                 stroke-width="2"
                                 stroke="currentColor"
                                 fill="none"
                                 stroke-linecap="round"
                                 stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M10 14l11 -11"></path>
                                <path d="M21 3l-6.5 18a.55 .55 0 0 1 -1 0l-3.5 -7l-7 -3.5a.55 .55 0 0 1 0 -1l18 -6.5"></path>
                            </svg>
                            <span class="sr-only">Send message</span>
                        </button>
                    </div>
                </div>
            }
        }

    </div>

</main>

<aside class="fixed inset-y-0 left-72 hidden w-96 overflow-y-auto border-r border-gray-200 px-2 py-6 xl:block">
    <ul role="list" class="divide-y divide-gray-100">
        @if (threads == null)
        {
            <LoadingComponent />
        }
        else if (threads.Count == 0)
        {
            <div class="text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                </svg>
                <h3 class="mt-2 text-sm font-semibold text-gray-900">No Threads</h3>
                <p class="mt-1 text-sm text-gray-500">There is no conversation at the moment.</p>

            </div>
        }
        else
        {
            foreach (var thread in threads)
            {
                <li class="p-4  @((selectedThreadRecord!=null && selectedThreadRecord.Id==thread.Id)?"force-border":"hover:bg-gray-100 hover:rounded")">

                    <a href="javascript:void(0)" @onclick="(async ()=>await LoadMessages(thread.ThreadId,false))">
                        <div class="flex items-center gap-x-3">
                            @if (thread.NeedsAssistance)
                            {
                                <span class="relative flex h-3 w-3">
                                    <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-indigo-400 opacity-75"></span>
                                    <span class="relative inline-flex rounded-full h-3 w-3 bg-indigo-500"></span>
                                </span>
                            }

                            <h3 class="flex-auto truncate text-sm font-semibold leading-6 text-gray-900">@thread.PlatformUserId</h3>
                            <div class="flex-none text-xs text-gray-500">
                                <div class="mt-1 flex items-center gap-x-1.5">
                                    @if ((DateTime.UtcNow - thread.LastActivityAt).TotalMinutes < 3)
                                    {
                                        <div class="flex-none rounded-full bg-emerald-500/20 p-1">
                                            <div class="h-1.5 w-1.5 rounded-full bg-emerald-500"></div>
                                        </div>
                                        <p class="text-xs leading-5 text-gray-500">Online</p>
                                    }
                                    else
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
                                        </svg>

                                        <p class="text-xs leading-5 text-gray-500">Offline</p>
                                    }
                                   
                                </div>
                            </div>
                        </div>
                        <div class="flex items-center gap-x-3">
                            <h3 class="flex-auto truncate text-sm font-semibold leading-6 text-gray-500">Last Activity at @thread.LastActivityAt.Humanize()</h3>
                            <div class="flex-none text-xs text-gray-500">
                                <div class="mt-1 flex items-center gap-x-1.5">
                                    @if (thread.AiMode)
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-indigo-600">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.894 20.567L16.5 21.75l-.394-1.183a2.25 2.25 0 00-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 001.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 001.423 1.423l1.183.394-1.183.394a2.25 2.25 0 00-1.423 1.423z" />
                                        </svg>
                                        <span class="text-indigo-600">AI bot</span>
                                    }
                                    else
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
                                        </svg>

                                        <span>Agent</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </a>

                </li>
            }
        }
        @*      <li class="p-4 border border-indigo-300 rounded hover:bg-gray-100 ">
        <a href="javascript:void(0)">
        <div class="flex items-center gap-x-3">
        <h3 class="flex-auto truncate text-sm font-semibold leading-6 text-gray-900">Michael Foster</h3>
        <div class="flex-none text-xs text-gray-500">
        <div class="mt-1 flex items-center gap-x-1.5">
        <div class="flex-none rounded-full bg-emerald-500/20 p-1">
        <div class="h-1.5 w-1.5 rounded-full bg-emerald-500"></div>
        </div>
        <p class="text-xs leading-5 text-gray-500">Online</p>
        </div>
        </div>
        </div>
        <p class="mt-3 truncate text-sm text-gray-500">Source: WhatsApp</p>
        </a>
        </li>

        *@

    </ul>

</aside>

@code {
    [Parameter]
    public string assistantId { get; set; }
    public ThreadRecord selectedThreadRecord { get; set; }
    public List<ThreadRecord> threads { get; set; }
    public List<Conversations> messages { get; set; }
    public string text { get; set; }
    private ElementReference messagesContainer;
    public string APICode { get; set; } = "7Q7Uo9EsyC4jHnqocWFrwrYm-Cc94NHjHgYG4-wt2X_8AzFuHQ86RA==";
    private WebPubSubServiceClient serviceClient;
    private string hubName = "kaizen"; // Your hub name

     string UnixTimeStampToDateTime(double unixTimeStamp)
    {
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds(unixTimeStamp).ToLocalTime();
        return dateTime.Humanize();
    }
    protected override async Task OnInitializedAsync()
    {
        serviceClient = new WebPubSubServiceClient("Endpoint=https://kaizen.webpubsub.azure.com;AccessKey=qkNfsaNwCl4oPuYWg/fUK0pNHpvPUUkwHi+cWHq48y8=;Version=1.0;", hubName);
        var url = serviceClient.GetClientAccessUri();

        await JSRuntime.InvokeVoidAsync("websocketInterop.connect", DotNetObjectReference.Create(this), url);
    }

    [JSInvokable]
    public async void ReceiveMessage(string message)
    {
        string[] parts = message.Split("-");
        switch (parts[0])
        {
            case "messageRecieved":

                if (selectedThreadRecord != null && selectedThreadRecord.ThreadId == parts[1])
                {
                    await LoadMessages(selectedThreadRecord.ThreadId, true);
                    await PlaySoundAsync(0);

                }
                if (!threads.Exists(x => x.ThreadId == parts[1]))
                {
                    await LoadThreads();
                }

                break;
            case "needAssistance":

                await LoadThreads();
                await PlaySoundAsync(1);



                break;
            default:
                break;
        }
    }

    private async Task PlaySoundAsync(int val)
    {
        await JSRuntime.InvokeVoidAsync("playNotificationSound", val);
    }


    async Task LoadMessages(string threadId, bool loadMore)
    {
        try
        {

            selectedThreadRecord = threads.FirstOrDefault(x => x.ThreadId == threadId);
            StateHasChanged();
            string after = "none";
            if (loadMore)
            {
                after = messages.LastOrDefault().id;
            }
            else
            {
                messages = null;
            }
            if (messages == null)
            {
                messages = new List<Conversations>();
            }

            var response = await client.GetFromJsonAsync<APIGeneralResponse<List<Conversations>>>((string.IsNullOrEmpty(after) || after == "none") ? $"api/Conversation/{threadId}/none?code={APICode}" : $"api/Conversation/{threadId}/{after}?code={APICode}");

            foreach (var message in response.Data)
            {
                if (!messages.Exists(x => x.id == message.id))
                {
                    messages.Add(message);
                }
            }

            messages = messages.OrderBy(x => x.createdAt).ToList();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            StateHasChanged();

            await ScrollToBottom();
        }


    }

    static string RemoveSourceReference(string text)
    {
        string startPattern = "【";
        string endPattern = "】";
        int startIndex = text.IndexOf(startPattern);
        int endIndex;

        while (startIndex != -1)
        {
            endIndex = text.IndexOf(endPattern, startIndex);
            if (endIndex != -1)
            {
                // Remove the text from startPattern to endPattern
                text = text.Remove(startIndex, endIndex - startIndex + endPattern.Length);
            }
            else
            {
                // If there's no endPattern, break the loop
                break;
            }

            startIndex = text.IndexOf(startPattern);
        }

        return text;
    }

    async Task LoadThreads()
    {
        try
        {
            var response = await client.GetFromJsonAsync<APIGeneralResponse<List<ThreadRecord>>>($"api/Threads/{assistantId}?code={APICode}");
            threads = response.Data.OrderByDescending(x => x.LastActivityAt).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }



    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadThreads();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(500);
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
    }

    private async Task SendMessage()
    {
        if (selectedThreadRecord != null)
        {
            try
            {
                var conversation = new
                Conversations
                    { content = text, role = "agent" };
                conversation.metadata.Add("role", "agent");
                messages.Add(conversation);
                text = string.Empty;
                await ScrollToBottom();
                StateHasChanged();

                var response = await client.PostAsJsonAsync($"api/Chat?code={APICode}", new ConversationModel

                    {
                        AssistantId = selectedThreadRecord.AssistantId,
                        content = conversation.content,
                        role = "agent",
                        ThreadId = selectedThreadRecord.ThreadId
                    });
                if (response.IsSuccessStatusCode)
                {

                    //await LoadMessages(selectedThreadRecord.ThreadId);

                    // var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                    // // Process the response here, e.g., display the message in the UI or clear the text field
                    // userMessage = ""; // Clear the message input after sending
                    if (selectedThreadRecord.NeedsAssistance)
                    {
                        await LoadThreads();
                    }
                }
                else
                {
                    // Handle errors here
                    Console.WriteLine("Error sending message");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                StateHasChanged();
            }

        }


    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public async Task onToggle()
    {
        try
        {
            var response = await client.GetFromJsonAsync<APIGeneralResponse<bool>>($"api/Switch/{selectedThreadRecord.ThreadId}/{!selectedThreadRecord.AiMode}?code={APICode}");
            if (response.Status)
            {
                var response1 = await client.GetFromJsonAsync<APIGeneralResponse<List<ThreadRecord>>>($"api/Threads/{assistantId}?code={APICode}");
                threads = response1.Data;
                await LoadMessages(selectedThreadRecord.ThreadId, true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
